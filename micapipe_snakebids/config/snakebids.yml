#list of analysis levels in the bids app
analysis_levels:
  - participant

# mapping from analysis_level to set of target rules or files
targets_by_analysis_level:
  participant:
    - "all" # if '', then the first rule is run


# Configure components:
# Each entry creates a new component that can be retreived within the workflow
# via `generate_inputs`.
# Filters are used to select paths: each filter has an `entity` key and a
# single value or list of values to select.
# Wildcards are used to mark variable parts of paths. Each wildcard is an
# entity, such as `subject` or `session`, that may vary across component paths.

# NEW: `snakenull` is a new feature that allows you to specify
snakenull:
  enabled: true       # default: legacy behavior
  label: snakenull     # placeholder value for missing entities
  scope: all           # "all" or a list, e.g., ["session", "acquisition"]

pybids_inputs:
  t1w:
    filters:
      datatype: anat
      suffix: T1w
      extension: .nii.gz
    wildcards: 
      - subject
      - session
      - acquisition
      - run
      - part

  func:
    filters:
      suffix: bold
      extension: nii.gz

    wildcards:
      - subject
      - session
      - task
      - acquisition
      - run
      - echo
      - part

  dwi:
    filters:
      suffix: dwi
      extension: nii.gz

    wildcards:
      - subject
      - session
      - run
      - acquisition
      - direction
      - part

# configuration for the command-line parameters to make available
# passed on the argparse add_argument()
parse_args:
  --skip-bids-validation:
    help: |
      Skip validation of BIDS dataset. BIDS validation is performed by default
      using the bids-validator plugin (if installed/enabled) or with the pybids
      validator implementation (if bids-validator is not installed/enabled).
    dest: "plugins.validator.skip"
    action: "store_true"
    default: False

  --module:
    help: |
      The module to run. The module is a python script that contains the main
      function to run the analysis. The module should be in the same directory
      as the snakefile.
    dest: "module"
    required: True
    default: "structural"
    choices:
      - "structural"
      - "surface"
      - "dwi"
      - "SC"
      - "func"
      - "mpc"
      - "flair"
      - "mpc_swm"
      - "qc"
      - "test"

# Docker and singularity containers may be defined here
container:
  mode: "singularity"
  image: "/data_/mica1/01_programs/micapipe-v0.2.0/micapipe_v0.2.3.sif"

tmp_dir: "/data_/mica1/03_projects/enning/micapipe/tmp"

parameters:
  fs_license: "$FREESURFER_HOME/license.txt" #this is mandatory

  proc_structural:
    T1wStr: "DEFAULT"
    UNI: "FALSE"
    MF: 3

  proc_surface:
    T1: "DEFAULT"
    freesurfer: "FALSE"
    surf_dir: "FALSE"
    T1wStr: "DEFAULT"

  post_structural:
    atlas: "DEFAULT"

  proc_dwi:
    dwi_main: "DEFAULT" # multiple inputs
    dwi_rpe: "DEFAULT" # multiple inputs
    dwi_processed: "FALSE"
    rpe_all: "FALSE"
    regAffine: "FALSE"
    dwi_acq: "FALSE" 
    b0thr: 61
    # the following are just flags
    no_bvalue_scaling: "FALSE"
    regSynth: "FALSE"
    dwi_upsample: "FALSE"

  SC:
    tracts: "40M"
    keep_tck: "FALSE"
    autoTract: "FALSE"
    dwi_acq: "FALSE"
    weighted_SC: "FALSE"
    tck: "FALSE" #tricky
  
  proc_func:
    # Use "DEFAULT" to let your script apply its internal defaults if nothing is provided
    mainScanStr: "DEFAULT"       # -mainScanStr <str>
    func_pe: "DEFAULT"           # -func_pe <path>
    func_rpe: "DEFAULT"          # -func_rpe <path>

    # Optional parameters
    mainScanRun: "FALSE"         # -mainScanRun <num>
    phaseReversalRun: "FALSE"    # -phaseReversalRun <num>
    topupConfig: "FALSE"         # -topupConfig <str>
    icafixTraining: "FALSE"      # -icafixTraining <str>

    # Boolean flags
    smoothWithWB: "FALSE"        # -smoothWithWB TODO: dont exist in the script
    NSR: "FALSE"                 # -NSR
    GSR: "FALSE"                 # -GSR
    noFIX: "FALSE"               # -noFIX
    sesAnat: "FALSE"             # -sesAnat <str>
    regAffine: "FALSE"           # -regAffine
    dropTR: "FALSE"              # -dropTR
    noFC: "FALSE"                # -noFC

  proc_mpc:
    # Optional parameters
    microstructural_img: "FALSE"
    microstructural_reg: "FALSE"
    mpc_acq: "FALSE"

    # Boolean flags
    regSynth: "FALSE"
    reg_nonlinear: "FALSE"

  proc_flair:
    flairScanStr: "DEFAULT"

  proc_mpc_swm:
    # Optional parameters
    microstructural_img: "FALSE"
    microstructural_reg: "FALSE"
    mpc_acq: "FALSE"

    # Boolean flags
    regSynth: "FALSE"
    reg_nonlinear: "FALSE"
  
  qc_subj:
    tracts: "FALSE"
    tmpDir: "FALSE"

